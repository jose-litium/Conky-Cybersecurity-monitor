#!/usr/bin/env bash
# Conky Installation & Management Script con interfaz visual (dialog)
# Incluye instalación/configuración de Conky, monitorización de temperatura,
# escaneo automático con RKHunter y restauración de paquetes esenciales.
#
# Autor: Tu Nombre
# Fecha: 2025-02-17
# ------------------------------------------------------------------------------

# Verificar si 'dialog' está instalado
if ! command -v dialog >/dev/null 2>&1; then
    echo "El paquete 'dialog' es necesario. Instalándolo..."
    sudo apt update && sudo apt install -y dialog
fi

# Variables de colores para mensajes en terminal (útiles en salida normal)
BLUE='\033[1;34m'
CYAN='\033[1;36m'
GREEN='\033[1;32m'
MAGENTA='\033[1;35m'
YELLOW='\033[1;33m'
WHITE='\033[1;37m'
RED='\033[1;31m'
NC='\033[0m'  # Sin color

# Directorio de instalación para scripts auxiliares
INSTALL_DIR="$HOME/.local/conky_app"
mkdir -p "$INSTALL_DIR"

# ------------------------------------------------------------------------------
# Funciones para interacción visual con dialog
# ------------------------------------------------------------------------------

# Muestra un cuadro de diálogo de confirmación (Sí/No)
function dconfirm() {
    dialog --clear --yesno "$1" 7 60
    return $?
}

# Muestra un cuadro de mensaje
function dmsg() {
    dialog --clear --msgbox "$1" 10 60
}

# Muestra un menú y devuelve la opción elegida
function dmenu() {
    local menu_title="$1"
    shift
    local menu_options=("$@")
    local choice
    choice=$(dialog --clear --backtitle "Conky Cybersecurity Monitor" \
        --title "$menu_title" \
        --menu "Elige una opción:" 20 70 12 "${menu_options[@]}" 2>&1 >/dev/tty)
    echo "$choice"
}

# ------------------------------------------------------------------------------
# Solicitar privilegios sudo al inicio
# ------------------------------------------------------------------------------
dmsg "Se requieren privilegios de administrador para instalar paquetes."
sudo -v || { dmsg "No se pudieron obtener privilegios sudo. Saliendo..."; exit 1; }

# ------------------------------------------------------------------------------
# Función: check_user_systemd
#   Verifica si hay systemd a nivel de usuario disponible.
# ------------------------------------------------------------------------------
function check_user_systemd() {
    if ! systemctl --user 2>/dev/null; then
        dmsg "Systemd a nivel de usuario no está disponible. Utiliza un sistema con soporte (Ubuntu 18.04+)."
        exit 1
    fi
}

# ------------------------------------------------------------------------------
# Función: check_install
#   Verifica si un paquete está instalado; si no, pregunta si se desea instalar.
# ------------------------------------------------------------------------------
function check_install() {
    local pkg="$1"
    if dpkg -l | grep -qw "$pkg"; then
        echo -e "${GREEN}$pkg ya está instalado.${NC}"
    else
        echo -e "${CYAN}$pkg no está instalado.${NC}"
        if dconfirm "¿Deseas instalar $pkg?"; then
            sudo apt install -y "$pkg"
        else
            echo -e "${RED}Omitiendo la instalación de $pkg. Esto puede afectar la funcionalidad.${NC}"
        fi
    fi
}

# ------------------------------------------------------------------------------
# Función: create_rkhunter_scan_script
#   Crea un script auxiliar para escanear con RKHunter cada vez que se inicia Conky.
# ------------------------------------------------------------------------------
function create_rkhunter_scan_script() {
    local SCRIPT="$INSTALL_DIR/rkhunter_scan.sh"
    cat <<'EOF' > "$SCRIPT"
#!/usr/bin/env bash
sudo rkhunter --update > /dev/null 2>&1 && \
sudo rkhunter --propupd > /dev/null 2>&1 && \
sudo rkhunter --check --sk > /tmp/rkhunter_result.txt 2>/dev/null && \
grep -i "warning" /tmp/rkhunter_result.txt > /tmp/rkhunter_warnings.txt
EOF
    chmod +x "$SCRIPT"
}

# ------------------------------------------------------------------------------
# Función: configure_sensors
#   Ejecuta sensors-detect para configurar lm-sensors automáticamente.
# ------------------------------------------------------------------------------
function configure_sensors() {
    echo -e "${BLUE}Configurando sensores de hardware (lm-sensors)...${NC}"
    if command -v sensors &> /dev/null; then
         if dconfirm "¿Deseas ejecutar sensors-detect para configurar tus sensores automáticamente?"; then
             echo -e "${BLUE}Ejecutando sensors-detect...${NC}"
             yes | sudo sensors-detect > /dev/null 2>&1
             echo -e "${GREEN}Configuración de sensores completada.${NC}"
         else
             echo -e "${YELLOW}Saltando configuración de sensors-detect.${NC}"
         fi
    else
         echo -e "${RED}lm-sensors no está instalado. Saltando configuración de sensores.${NC}"
    fi
}

# ------------------------------------------------------------------------------
# Función: create_temp_monitor_script
#   Crea un script auxiliar que se ejecuta en segundo plano para monitorear la temperatura de la CPU.
# ------------------------------------------------------------------------------
function create_temp_monitor_script() {
    local SCRIPT="$INSTALL_DIR/temp_monitor.sh"
    cat <<'EOF' > "$SCRIPT"
#!/usr/bin/env bash
while true; do
    temp=$(sensors | grep -Eo '\+[0-9]+(\.[0-9]+)?°C' | head -n1)
    echo "${temp:-N/A}" > /tmp/cpu_temp.txt
    sleep 10
done
EOF
    chmod +x "$SCRIPT"
}

# ------------------------------------------------------------------------------
# Función: install_temp_monitor_service
#   Instala un servicio systemd a nivel de usuario para el monitor de temperatura.
# ------------------------------------------------------------------------------
function install_temp_monitor_service() {
    mkdir -p ~/.config/systemd/user
    cat <<EOL > ~/.config/systemd/user/temp_monitor.service
[Unit]
Description=Monitor de Temperatura para Conky

[Service]
Type=simple
ExecStart=/usr/bin/env bash "$INSTALL_DIR/temp_monitor.sh"
Restart=always

[Install]
WantedBy=default.target
EOL
    systemctl --user daemon-reload
    systemctl --user enable temp_monitor.service
    systemctl --user start temp_monitor.service
    echo -e "${GREEN}Servicio de monitor de temperatura instalado y iniciado.${NC}"
}

# ------------------------------------------------------------------------------
# Función: install_rkhunter_service
#   Instala un servicio y temporizador systemd a nivel de sistema para ejecutar RKHunter automáticamente.
# ------------------------------------------------------------------------------
function install_rkhunter_service() {
    echo -e "${BLUE}Instalando servicio automático de escaneo con RKHunter...${NC}"
    sudo tee /etc/systemd/system/rkhunter-auto.service > /dev/null <<EOL
[Unit]
Description=Escaneo Automático con RKHunter

[Service]
Type=oneshot
ExecStart=/bin/bash -c 'rkhunter --update > /dev/null 2>&1 && rkhunter --propupd > /dev/null 2>&1 && rkhunter --check --sk > /tmp/rkhunter_result.txt 2>/dev/null && grep -i "warning" /tmp/rkhunter_result.txt > /tmp/rkhunter_warnings.txt'
RemainAfterExit=yes
EOL

    sudo tee /etc/systemd/system/rkhunter-auto.timer > /dev/null <<EOL
[Unit]
Description=Temporizador para Escaneo Automático con RKHunter

[Timer]
OnBootSec=5min
OnUnitActiveSec=10min

[Install]
WantedBy=timers.target
EOL

    sudo systemctl daemon-reload
    sudo systemctl enable rkhunter-auto.timer
    sudo systemctl start rkhunter-auto.timer
    echo -e "${GREEN}Servicio y temporizador automático de RKHunter instalados.${NC}"
    echo -e "${YELLOW}Log de alertas: /tmp/rkhunter_warnings.txt${NC}"
}

# ------------------------------------------------------------------------------
# Función: remove_rkhunter_service
#   Elimina el servicio y temporizador automático de RKHunter.
# ------------------------------------------------------------------------------
function remove_rkhunter_service() {
    echo -e "${RED}Eliminando servicio y temporizador automático de RKHunter...${NC}"
    sudo systemctl disable rkhunter-auto.timer
    sudo systemctl stop rkhunter-auto.timer
    sudo rm -f /etc/systemd/system/rkhunter-auto.timer
    sudo systemctl disable rkhunter-auto.service
    sudo rm -f /etc/systemd/system/rkhunter-auto.service
    sudo systemctl daemon-reload
    echo -e "${GREEN}Servicio y temporizador automático de RKHunter eliminados.${NC}"
}

# ------------------------------------------------------------------------------
# Función: install_conky
#   Instala conky-all y sus dependencias, configura RKHunter,
#   crea un servicio systemd a nivel de usuario para Conky y lo inicia.
# ------------------------------------------------------------------------------
function install_conky() {
    if ! dconfirm "¿Proceder con la instalación y configuración de Conky?"; then
        dmsg "Instalación abortada por el usuario."
        return
    fi
    check_user_systemd
    echo -e "${BLUE}Actualizando listas de paquetes...${NC}"
    sudo apt update

    # Paquetes requeridos para la funcionalidad de Conky (incluyendo lm-sensors)
    local APPS=("conky-all" "curl" "net-tools" "lsof" "xdg-utils" "rkhunter" "lm-sensors" "nmap" "upower")
    for APP in "${APPS[@]}"; do
        check_install "$APP"
    done

    # Configurar lm-sensors
    configure_sensors

    # Crear el script auxiliar de RKHunter
    create_rkhunter_scan_script

    echo -e "${BLUE}Configurando permisos para RKHunter...${NC}"
    sudo chmod +r /var/log/rkhunter.log
    sudo usermod -aG adm "$(whoami)"

    echo -e "${BLUE}Configurando sudoers para comandos de Conky...${NC}"
    echo "$(whoami) ALL=(ALL) NOPASSWD: /usr/bin/netstat, /usr/bin/lsof, /usr/bin/grep, /usr/bin/cat, /usr/bin/sensors, /usr/bin/journalctl, /usr/bin/curl, /usr/bin/hostname -I, /usr/bin/rkhunter" \
         | sudo tee /etc/sudoers.d/conky > /dev/null
    sudo chmod 0440 /etc/sudoers.d/conky

    mkdir -p ~/.config/conky

    USERNAME="$USER"
    echo -e "${BLUE}Creando configuración de Conky...${NC}"
    cat <<EOL > ~/.config/conky/conky.conf
conky.config = {
    alignment = 'top_right',
    background = false,
    double_buffer = true,
    update_interval = 1,
    own_window = true,
    own_window_type = 'desktop',
    own_window_argb_visual = true,
    own_window_argb_value = 140,
    own_window_hints = 'undecorated,below,sticky,skip_taskbar,skip_pager',
    gap_x = 15,
    gap_y = 50,
    minimum_width = 420,
    minimum_height = 750,
    draw_shades = false,
    draw_borders = false,
    use_xft = true,
    default_color = 'white',
    default_outline_color = 'blue',
    override_utf8_locale = true,
};

conky.text = [[
\${exec /home/${USERNAME}/.local/conky_app/rkhunter_scan.sh > /dev/null 2>&1}
\${color yellow}\${time %H:%M:%S}       Vietnam (GMT+7)
\${color cyan}\${execi 10 TZ='Europe/Madrid' date '+%H:%M:%S'}       Madrid (GMT+1)
\${color green}\${execi 10 TZ='Australia/Sydney' date '+%H:%M:%S'}       Sydney (GMT+10)
\${color magenta}\${execi 10 TZ='America/New_York' date '+%H:%M:%S'}      New York (GMT-5)

\${color magenta}------ Indicadores de Hardware ------
\${color white}CPU: \${if_match \${cpu cpu0} > 80}\${color red}\${cpu cpu0}%\${else}\${color green}\${cpu cpu0}%\${endif} \${cpubar cpu0 10,}
\${color white}RAM: \${if_match \${memperc} > 40}\${color red}\${memperc}%\${else}\${color green}\${memperc}%\${endif} \${membar 10}
\${color white}Main HDD: \${if_match \${fs_used_perc /} > 60}\${color red}\${fs_used_perc /}%\${else}\${color green}\${fs_used_perc /}%\${endif} \${fs_bar /}
\${color white}Temp. CPU: \${color red}\${execi 10 cat /tmp/cpu_temp.txt || echo "N/A"}
\${color white}Uptime: \${color green}\${uptime}

\${color magenta}------ Información de Red ------
\${color white}IP Local: \${color cyan}\${execi 10 hostname -I | cut -d' ' -f1}
\${color white}IP Pública: \${color cyan}\${execi 600 curl -s ifconfig.me}
\${color white}VPN: \${color yellow}\${execi 30 bash -c "if [ \$(nmcli -t -f type connection show --active | grep -ic vpn) -eq 0 ]; then echo 'inactiva'; else echo 'activa'; fi"}
\${color white}Estado SSH: \${color yellow}\${execi 30 systemctl is-active ssh}
\${color white}Conexiones Establecidas: \${color red}\${execi 10 netstat -an | grep ESTABLECIDO | wc -l}
\${color white}Puertos Abiertos: \${color red}\${execi 10 netstat -tuln | grep ESCUCHA | wc -l}

\${color magenta}------ Usuarios Conectados ------
\${color white}Usuarios: \${color cyan}\${execi 30 who | awk '{print \$1}' | sort | uniq | xargs}

\${color magenta}------ Eventos de Seguridad ------
\${color white}Eventos Recientes: \${color red}\${execi 30 journalctl -n 5 -p 3 -u ssh.service --no-pager | tail -n 5}

\${color magenta}------ Alertas de Rootkit ------
\${color white}Alertas: \${execi 600 bash -c 'if [ -f /tmp/rkhunter_warnings_prev.txt ]; then if cmp -s /tmp/rkhunter_warnings.txt /tmp/rkhunter_warnings_prev.txt; then echo "0"; else echo "1"; cp /tmp/rkhunter_warnings.txt /tmp/rkhunter_warnings_prev.txt; fi; else if [ -s /tmp/rkhunter_warnings.txt ]; then echo "1"; cp /tmp/rkhunter_warnings.txt /tmp/rkhunter_warnings_prev.txt; else echo "0"; fi; fi'} \${color yellow}*Log: \${color #CCCCCC}/tmp/rkhunter_warnings.txt

\${color magenta}------ Top 5 Procesos ------
\${color white}\${execi 5 ps -eo pid,comm,%cpu --sort=-%cpu | head -n 6 | tail -n 5}
]];
EOL

    # Crear servicio systemd a nivel de usuario para Conky
    mkdir -p ~/.config/systemd/user
    echo -e "${BLUE}Creando servicio systemd para Conky...${NC}"
    cat <<EOL > ~/.config/systemd/user/conky.service
[Unit]
Description=Conky (Nivel de Usuario)
After=default.target

[Service]
Type=simple
ExecStart=/usr/bin/conky -b -c "/home/$USER/.config/conky/conky.conf"
Restart=on-failure

[Install]
WantedBy=default.target
EOL

    # Recargar systemd y habilitar servicio de Conky
    systemctl --user daemon-reload
    systemctl --user enable conky.service
    systemctl --user start conky.service

    echo -e "${GREEN}Instalación de Conky completa.${NC}"
    echo -e "${GREEN}Conky se está ejecutando bajo tu sesión systemd de usuario.${NC}"

    # Instalar monitor de temperatura
    create_temp_monitor_script
    install_temp_monitor_service

    # Instalar servicio automático de RKHunter
    install_rkhunter_service
}

# ------------------------------------------------------------------------------
# Función: uninstall_conky
#   Detiene y elimina conky-all (y procesos de Conky) junto con su configuración.
# ------------------------------------------------------------------------------
function uninstall_conky() {
    if dconfirm "¿Estás seguro de que deseas eliminar completamente Conky y todos sus procesos?"; then
        echo -e "${RED}Deteniendo el servicio de Conky y todos los procesos...${NC}"
        if [ -f ~/.config/systemd/user/conky.service ]; then
            systemctl --user stop conky.service
            systemctl --user disable conky.service
            rm -f ~/.config/systemd/user/conky.service
            systemctl --user daemon-reload
        fi
        # Detener servicio de monitor de temperatura
        if [ -f ~/.config/systemd/user/temp_monitor.service ]; then
            systemctl --user stop temp_monitor.service
            systemctl --user disable temp_monitor.service
            rm -f ~/.config/systemd/user/temp_monitor.service
            systemctl --user daemon-reload
        fi
        # Matar procesos restantes de Conky
        pkill -f conky
        sleep 1
        echo -e "${RED}Eliminando configuración de Conky...${NC}"
        rm -rf ~/.config/conky
        echo -e "${GREEN}Eliminando paquetes conky y conky-all...${NC}"
        sudo apt remove --purge -y conky conky-all
        dmsg "Desinstalación de Conky completa."
    else
        dmsg "Desinstalación abortada."
    fi
}

# ------------------------------------------------------------------------------
# Función: start_conky
#   Inicia el servicio de Conky a nivel de usuario.
# ------------------------------------------------------------------------------
function start_conky() {
    echo -e "${GREEN}Iniciando servicio de Conky (usuario)...${NC}"
    if [ -f ~/.config/systemd/user/conky.service ]; then
        systemctl --user start conky.service
        systemctl --user status conky.service --no-pager
        dmsg "Servicio de Conky iniciado."
    else
        dmsg "No se encontró el servicio de Conky. Instala Conky primero."
    fi
}

# ------------------------------------------------------------------------------
# Función: stop_conky
#   Detiene el servicio de Conky a nivel de usuario.
# ------------------------------------------------------------------------------
function stop_conky() {
    echo -e "${GREEN}Deteniendo servicio de Conky (usuario)...${NC}"
    if [ -f ~/.config/systemd/user/conky.service ]; then
        systemctl --user stop conky.service
        systemctl --user status conky.service --no-pager
        dmsg "Servicio de Conky detenido."
    else
        dmsg "No se encontró el servicio de Conky. Instala Conky primero."
    fi
}

# ------------------------------------------------------------------------------
# Función: restart_conky
#   Reinicia el servicio de Conky a nivel de usuario.
# ------------------------------------------------------------------------------
function restart_conky() {
    echo -e "${GREEN}Reiniciando servicio de Conky (usuario)...${NC}"
    if [ -f ~/.config/systemd/user/conky.service ]; then
        systemctl --user restart conky.service
        systemctl --user status conky.service --no-pager
        dmsg "Servicio de Conky reiniciado."
    else
        dmsg "No se encontró el servicio de Conky. Instala Conky primero."
    fi
}

# ------------------------------------------------------------------------------
# Función: check_rkhunter
#   Ejecuta un escaneo automático con RKHunter y muestra alertas si existen.
# ------------------------------------------------------------------------------
function check_rkhunter() {
    echo -e "${BLUE}Ejecutando escaneo con RKHunter...${NC}"
    local WARN_LOG="/tmp/rkhunter_warnings.txt"
    sudo rkhunter --update > /dev/null 2>&1
    sudo rkhunter --propupd > /dev/null 2>&1
    sudo rkhunter --check --sk > /tmp/rkhunter_result.txt 2>/dev/null
    grep -i "warning" /tmp/rkhunter_result.txt > "$WARN_LOG"
    if [ -s "$WARN_LOG" ]; then
         local count
         count=$(wc -l < "$WARN_LOG")
         dmsg "Tienes ${count} alerta(s).\nVer alertas con: cat $WARN_LOG"
    else
         dmsg "No se detectaron alertas."
         rm -f "$WARN_LOG"
    fi
}

# ------------------------------------------------------------------------------
# Función: restore_system
#   Reinstala paquetes esenciales del sistema que podrían haber sido removidos.
# ------------------------------------------------------------------------------
function restore_system() {
    echo -e "${BLUE}Restaurando paquetes esenciales del sistema...${NC}"
    sudo apt update

    local ESSENTIAL_PACKAGES=("ubuntu-desktop" "gdm3" "nautilus" "gvfs" "gvfs-backends" "gvfs-daemons" "gvfs-common" "ubuntu-standard" "ubuntu-minimal" "dbus-x11" "network-manager")
    local note

    for pkg in "${ESSENTIAL_PACKAGES[@]}"; do
         case "$pkg" in
              "ubuntu-desktop")
                   note="(Instala el entorno de escritorio por defecto de Ubuntu)";;
              "gdm3")
                   note="(Instala el Gestor de Sesiones GNOME)";;
              "nautilus")
                   note="(Instala el administrador de archivos de GNOME)";;
              "gvfs")
                   note="(Instala el sistema de archivos virtual de GNOME)";;
              "gvfs-backends")
                   note="(Proporciona backends para GVFS)";;
              "gvfs-daemons")
                   note="(Instala daemons para GVFS)";;
              "gvfs-common")
                   note="(Archivos comunes para GVFS)";;
              "ubuntu-standard")
                   note="(Paquetes estándar para Ubuntu)";;
              "ubuntu-minimal")
                   note="(Paquetes mínimos requeridos para Ubuntu)";;
              "dbus-x11")
                   note="(Proporciona soporte X11 para DBus)";;
              "network-manager")
                   note="(Gestiona conexiones de red)";;
              *)
                   note="(Sin información adicional)";;
         esac

         if dconfirm "¿Deseas reinstalar $pkg $note?"; then
              sudo apt install -y "$pkg"
         else
              echo -e "${YELLOW}Omitiendo reinstalación de $pkg.${NC}"
         fi
    done

    if dconfirm "¿Deseas ejecutar 'sudo apt --fix-broken install -y' para corregir dependencias rotas?"; then
         sudo apt --fix-broken install -y
    else
         echo -e "${YELLOW}Saltando corrección de dependencias.${NC}"
    fi

    if ! dpkg -l | grep -qw google-chrome-stable; then
         if dconfirm "Google Chrome no está instalado. ¿Deseas instalarlo?"; then
             wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb -O /tmp/google-chrome-stable_current_amd64.deb
             sudo dpkg -i /tmp/google-chrome-stable_current_amd64.deb || sudo apt -f install -y
         else
             echo -e "${YELLOW}Saltando instalación de Google Chrome.${NC}"
         fi
    else
         if dconfirm "Google Chrome ya está instalado. ¿Deseas reinstalarlo?"; then
             sudo apt install --reinstall -y google-chrome-stable
         else
             echo -e "${YELLOW}Manteniendo la instalación actual de Google Chrome.${NC}"
         fi
    fi

    dmsg "Restauración de paquetes esenciales completada."
}

# ------------------------------------------------------------------------------
# Función: main_menu
#   Muestra un menú numérico y llama a las funciones correspondientes.
# ------------------------------------------------------------------------------
function main_menu() {
    while true; do
        # Mostrar banner ASCII
        local banner="  ____                _           
 / ___|___  _ __  ___| |__   ___  
| |   / _ \| '_ \/ __| '_ \ / _ \ 
| |__| (_) | | | \__ \ | | |  __/ 
 \____\___/|_| |_|___/_| |_|\___| 

 Cybersecurity Monitor"
        dialog --clear --title "Bienvenido a Conky Cybersecurity Monitor" --msgbox "$banner" 12 60

        # Mostrar menú principal
        choice=$(dmenu "Menú Principal" \
            1 "Instalar Conky" \
            2 "Desinstalar Conky" \
            3 "Iniciar Conky" \
            4 "Detener Conky" \
            5 "Reiniciar Conky" \
            6 "Ejecutar RKHunter (Manual)" \
            7 "Restaurar Paquetes Esenciales" \
            8 "Instalar Servicio Automático RKHunter" \
            9 "Eliminar Servicio Automático RKHunter" \
            10 "Salir")
        
        case "$choice" in
            1) install_conky ;;
            2) uninstall_conky ;;
            3) start_conky ;;
            4) stop_conky ;;
            5) restart_conky ;;
            6) check_rkhunter ;;
            7) restore_system ;;
            8) install_rkhunter_service ;;
            9) remove_rkhunter_service ;;
            10)
                dmsg "¡Adiós!"
                clear
                exit 0
                ;;
            *)
                dmsg "Opción inválida. Intenta nuevamente."
                ;;
        esac
    done
}

# Iniciar el menú principal
main_menu
